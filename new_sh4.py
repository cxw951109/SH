# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'new_sh2.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import re
import os
import sys
import cv2
import time
import mmap
import threading
from config.sql import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from fastapi import FastAPI
from PyQt5.QtWidgets import *
from pydantic import BaseModel
from collections import defaultdict
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWebChannel import QWebChannel
from PyQt5.QtWebEngineWidgets import QWebEngineView
from PyQt5.QtWidgets import QApplication, QWidget, QStackedLayout

global datas
datas = []
app = FastAPI()


def get_img(lists,IMAGE):
    shrink = cv2.resize(IMAGE, (500, 300))
    shrink = cv2.cvtColor(shrink, cv2.COLOR_BGR2RGB)
    for i in lists:
        if len(i)>=3:
            cv2.rectangle(shrink, (i[0], i[1]), (i[2], i[3]), (255, 0, 0), 2)
        else:
            cv2.circle(shrink, (i[0], i[1]), 4, (0, 255, 0), 2)
    QtImg = QImage(shrink,
                   shrink.shape[1],
                   shrink.shape[0],
                   shrink.shape[1] * 3,
                   QImage.Format_RGB888)
    return QtImg


def create_data(one, two, three):
    # filename = 'a:change_product.json'
    data = {"last_four": one, "total": two, "step_count": three,"step":2}
    # try:
    #     with open(filename, 'w') as file_obj:
    #         json.dump(data, file_obj)
    #     file_obj.close()
    #     return True
    # except Exception as e:
    #     print(e)
    #     return False
    mmap_file.seek(0)
    mmap_file.write(json.dumps(data).encode())


def create_data1(list1, list2):
    # filename = 'a:change_product.json'
    data = {"x0": float(list1[0][0])/500, "y0": float(list1[0][1])/300, "x1": float(list1[1][0])/500,"y1":float(list1[1][1])/300,"x2": float(list2[0][0])/500, "y2": float(list2[0][1])/300, "x3": float(list2[1][0])/500,"y3":float(list2[1][1])/300,"step":3}
    # try:
    #     with open(filename, 'w') as file_obj:
    #         json.dump(data, file_obj)
    #     file_obj.close()
    #     return True
    # except Exception as e:
    #     print(e)
    #     return False
    mmap_file.seek(0)
    mmap_file.write(json.dumps(data).encode())


class Worker(QThread, QObject):
    updated = QtCore.pyqtSignal(str)

    def __init__(self):
        QObject.__init__(self)
        super(Worker, self).__init__()
        self.Flag = True
        global datas

    def run(self):
        while (True):
            try:
                if (not self.Flag):
                    break
                else:
                    print('worker running')
                    if datas != []:
                        self.updated.emit(datas[0])
                    time.sleep(2)
            except Exception as e:
                print(e)

    def setFlag(self, parm):
        self.Flag = parm


class Worker1(QThread, QObject):
    updated1 = QtCore.pyqtSignal(int)

    def __init__(self):
        QObject.__init__(self)
        super(Worker1, self).__init__()
        self.Flag = False

    def run(self):
        n = 1
        while (True):
            try:
                if (not self.Flag):
                    time.sleep(1)
                else:
                    print('worker1 running')
                    self.updated1.emit(n)
                    n = n + 1
                    if n == 4:
                        n = 1
                    time.sleep(1)

            except Exception as e:
                print(e)

    def setFlag(self, parm):
        self.Flag = parm


class Worker2(QThread, QObject):
    updated2 = QtCore.pyqtSignal(int)

    def __init__(self):
        QObject.__init__(self)
        super(Worker2, self).__init__()
        self.Flag = False

    def run(self):
        n = 1
        while (True):
            try:
                if (not self.Flag):
                    time.sleep(1)
                else:
                    print('worker2 running')
                    self.updated2.emit(n)
                    n = n + 1
                    if n == 4:
                        n = 1
                    time.sleep(1)

            except Exception as e:
                print(e)

    def setFlag(self, parm):
        self.Flag = parm


class MyLabel(QLabel):
    def __init__(self, parent=None, *args, **kwargs):
        super(MyLabel, self).__init__(parent, *args, **kwargs)
        self.x0 = -100
        self.y0 = 0
        self.x1 = 0
        self.y1 = 0
        self.a = None
        self.b = None
        self.c = None
        self.d = None
        self.lists = []
        self.flag = False
        self.method = 'spots'
        self.pix = QPixmap(500,300)
        self.temp = QPixmap()
        self.image=''

    def paintEvent(self, event):
        """
        重载绘制事件。
        将self.pix中的内容复制到缓存中，在缓存上绘图。
        """
        if self.method == 'frames' and self.x0 != -100:
            x = self.x0
            y = self.y0
            w = self.x1 - self.x0
            h = self.y1 - self.y0
            self.temp = self.pix.copy()
            pp = QPainter(self.temp)
            pp.setPen(QPen(Qt.red, 2, Qt.SolidLine))
            pp.drawRect(x, y, w, h)
            painter = QPainter(self)
            painter.drawPixmap(0, 0, self.temp)
        elif self.method == 'spots' and self.x0 != -100:
            self.temp = self.pix.copy()
            pp = QPainter(self.temp)
            pp.setPen(QPen(Qt.green, 4))
            pp.drawPoint(self.x0, self.y0)
            painter = QPainter(self)
            painter.drawPixmap(0, 0, self.temp)
        else:
            self.temp = self.pix.copy()
            painter = QPainter(self)
            painter.drawPixmap(0, 0, self.temp)

    def mousePressEvent(self, event):
        """
        按下鼠标左键后，将当前位置存储到起点中。
        """
        self.flag = True
        self.x0 = event.x()
        self.y0 = event.y()
        self.a = self.x0
        self.b = self.y0

    def mouseMoveEvent(self, event):
        """
        鼠标左键被按下且在滑动中，调用绘图函数。
        """
        a = event.x()
        b = event.y()
        if self.flag:
            self.x1 = a
            self.y1 = b
            self.update()

    def mouseReleaseEvent(self, event):
        """
        松开鼠标左键后，将当前位置存储到终点中；绘制图案，并将缓存中的内容更新到self.pix中。
        """
        self.flag = False
        self.x0 = event.x()
        self.y0 = event.y()
        self.c = self.x0
        self.d = self.y0
        if self.x0 <= 500 and self.y0 <= 300 and self.x0 >= 0 and self.y0 >= 0:
            # if self.a != self.c or self.b != self.d:
            if self.method == 'frames':
                e = [self.a, self.b, self.c, self.d]
            else:
                e = [self.a, self.b]
            if len(self.lists) ==2:
                aa =abs(self.lists[0][0]-e[0])
                bb =abs(self.lists[0][1]-e[1])
                cc =abs(self.lists[1][0]-e[0])
                dd =abs(self.lists[1][1]-e[1])
                if aa*aa+bb*bb >cc*cc+dd*dd:
                    self.lists[1] =e
                else:
                    self.lists[0] =e
            else:
                self.lists.append(e)
            img = get_img(self.lists,self.image)
            self.pix = QPixmap.fromImage(img)
            self.update()


class Item1(BaseModel):
    key: int
    value: str


class Item2(BaseModel):
    line1: str
    line2: str
    line3: str
    line4: str
    good: int
    bad: int


class Ui_Dialog(QDialog):
    t10 =Worker1()
    t11 = Worker2()
    def __init__(self):
        super().__init__()
        self.setupUi()

    def setupUi(self):
        self.resize(800, 600)
        self.t10.updated1.connect(self.wait_re)
        self.t11.updated2.connect(self.wait_re1)
        self.setWindowIcon(QIcon("./icon/logo.ico"))
        self.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint | QtCore.Qt.WindowCloseButtonHint)
        self.gridLayout = QtWidgets.QGridLayout(self)
        self.frame0 = QtWidgets.QFrame(self)
        self.frame0.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame0.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame = QtWidgets.QFrame(self)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.hide()
        self.frame1 = QtWidgets.QFrame(self)
        self.frame1.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame1.hide()

        self.gridLayout_20 = QtWidgets.QGridLayout(self.frame0)
        self.horizontalLayout_20 = QtWidgets.QHBoxLayout()
        self.label20 = QtWidgets.QLabel(self.frame0)
        self.label20.setMinimumSize(QtCore.QSize(135, 0))
        self.horizontalLayout_20.addWidget(self.label20)
        self.lineEdit = QtWidgets.QLineEdit(self.frame0)
        self.lineEdit.setPlaceholderText('24GF')
        self.lineEdit.setMinimumSize(QtCore.QSize(0, 50))
        self.horizontalLayout_20.addWidget(self.lineEdit)
        self.gridLayout_20.addLayout(self.horizontalLayout_20, 0, 0, 1, 1)
        self.horizontalLayout_21 = QtWidgets.QHBoxLayout()
        self.label21 = QtWidgets.QLabel(self.frame0)
        self.label21.setMinimumSize(QtCore.QSize(135, 0))
        self.horizontalLayout_21.addWidget(self.label21)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.frame0)
        self.lineEdit_2.setPlaceholderText('18')
        self.lineEdit_2.setMinimumSize(QtCore.QSize(0, 50))
        self.horizontalLayout_21.addWidget(self.lineEdit_2)
        self.gridLayout_20.addLayout(self.horizontalLayout_21, 1, 0, 1, 1)
        self.horizontalLayout_22 = QtWidgets.QHBoxLayout()
        self.label22 = QtWidgets.QLabel(self.frame0)
        self.label22.setMinimumSize(QtCore.QSize(135, 0))
        self.horizontalLayout_22.addWidget(self.label22)
        self.lineEdit_3 = QtWidgets.QLineEdit(self.frame0)
        self.lineEdit_3.setPlaceholderText('3')
        self.lineEdit_3.setMinimumSize(QtCore.QSize(0, 50))
        self.horizontalLayout_22.addWidget(self.lineEdit_3)
        self.gridLayout_20.addLayout(self.horizontalLayout_22, 2, 0, 1, 1)
        self.gridLayout.addWidget(self.frame0, 0, 0, 1, 1)
        self.horizontalLayout_23 = QtWidgets.QHBoxLayout()
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_23.addItem(spacerItem)
        self.pushButton12 = QtWidgets.QPushButton(self)
        self.pushButton12.clicked.connect(self.write_json)
        self.pushButton12.setMinimumSize(QtCore.QSize(150, 60))
        self.pushButton12.setStyleSheet("QPushButton\n"
                                        "                    {text-align : center;\n"
                                        "                     color:gray;\n"
                                        "                     font: bold;\n"
                                        "                     border-radius:10px;\n"
                                        "                     border-top-color: #888888;\n"
                                        "                     border-left-color: #888888;\n"
                                        "                     border-right-color: #CCCCCC;\n"
                                        "                     border-bottom-color: #CCCCCC;\n"
                                        "                     border-top-width:2px;\n"
                                        "                     border-left-width:3px;\n"
                                        "                     border-right-width:3px;\n"
                                        "                     border-bottom-width:4px;\n"
                                        "                     background-color:qlineargradient(x1:0, y1:0, x2:0, y2:1, stop: 0 #E5E5E5, stop: 1 #B7B7B7);\n"
                                        "                     background-color: rgb(255, 254, 249);\n"
                                        "                     border-style: outset;\n"
                                        "                     font : 14px;}\n"
                                        "                     QPushButton:pressed\n"
                                        "                     {text-align : center;\n"
                                        "                      background-color : light gray;\n"
                                        "                      font: bold;\n"
                                        "                      border-top-color: #888888;\n"
                                        "                      border-left-color: #888888;\n"
                                        "                      border-right-color: #CCCCCC;\n"
                                        "                      border-bottom-color: #CCCCCC;\n"
                                        "                      border-width: 2px;\n"
                                        "                      border-style: outset;\n"
                                        "                      font : 14px;}\n"
                                        "\n"
                                        "")
        self.horizontalLayout_23.addWidget(self.pushButton12)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_23.addItem(spacerItem1)
        self.gridLayout_20.addLayout(self.horizontalLayout_23, 3, 0, 1, 1)
        self.label23 = QtWidgets.QLabel(self)
        self.label23.setMinimumSize(QtCore.QSize(0, 40))
        self.label23.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label23.setText("")
        self.gridLayout_20.addWidget(self.label23, 4, 0, 1, 1)
        self.gridLayout.addWidget(self.frame0, 0, 0, 1, 1)


        self.gridLayout_4 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.lb = MyLabel(self.frame)
        self.lb.setMinimumSize(QtCore.QSize(500, 300))
        self.lb.setMaximumSize(QtCore.QSize(500, 300))
        self.lb.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.lb.setCursor(Qt.CrossCursor)
        self.lb.setMouseTracking(True)
        self.verticalLayout.addWidget(self.lb)
        self.lb2 = MyLabel(self.frame)
        self.lb2.setMinimumSize(QtCore.QSize(500, 300))
        self.lb2.setMaximumSize(QtCore.QSize(500, 300))
        self.lb2.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.lb2.setCursor(Qt.CrossCursor)
        self.lb2.setMouseTracking(True)
        self.verticalLayout.addWidget(self.lb2)
        self.gridLayout_4.addLayout(self.verticalLayout, 0, 0, 1, 1)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.label_3 = QtWidgets.QLabel(self.frame)
        self.label_3.setMinimumSize(QtCore.QSize(300, 500))
        self.label_3.setMaximumSize(QtCore.QSize(300, 500))
        self.label_3.setWordWrap(True)
        self.label_3.setAlignment(QtCore.Qt.AlignTop)
        self.label_3.setText("<font style = 'font-size:30px; font-weight:bold'>" + '操作流程' + "</font>""<br/>""<br/>""<font style='font-size:22px'>"+"每张图片上，操作员需点击两处：最左上角的喷码中心和最右下角的喷码的中心。"+"</font>""<br/>""<br/>""<font style='font-size:22px'>"+"两张图片就是4个点，然后点确认。"+"</font>")
        self.verticalLayout_2.addWidget(self.label_3)
        self.widget = QtWidgets.QWidget(self)
        self.gridLayout_2 = QtWidgets.QGridLayout(self.widget)
        self.label11 = QtWidgets.QLabel(self.widget)
        self.gridLayout_2.addWidget(self.label11, 0, 0, 1, 4)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem, 1, 0, 1, 1)
        self.pushButton = QtWidgets.QPushButton(self.widget)
        self.pushButton.clicked.connect(self.next)
        self.pushButton.setMinimumSize(QtCore.QSize(100, 40))
        self.pushButton.setStyleSheet("QPushButton\n"
                                        "                    {text-align : center;\n"
                                        "                     color:gray;\n"
                                        "                     font: bold;\n"
                                        "                     border-radius:10px;\n"
                                        "                     border-top-color: #888888;\n"
                                        "                     border-left-color: #888888;\n"
                                        "                     border-right-color: #CCCCCC;\n"
                                        "                     border-bottom-color: #CCCCCC;\n"
                                        "                     border-top-width:2px;\n"
                                        "                     border-left-width:3px;\n"
                                        "                     border-right-width:3px;\n"
                                        "                     border-bottom-width:4px;\n"
                                        "                     background-color:qlineargradient(x1:0, y1:0, x2:0, y2:1, stop: 0 #E5E5E5, stop: 1 #B7B7B7);\n"
                                        "                     background-color: rgb(255, 254, 249);\n"
                                        "                     border-style: outset;\n"
                                        "                     font : 14px;}\n"
                                        "                     QPushButton:pressed\n"
                                        "                     {text-align : center;\n"
                                        "                      background-color : light gray;\n"
                                        "                      font: bold;\n"
                                        "                      border-top-color: #888888;\n"
                                        "                      border-left-color: #888888;\n"
                                        "                      border-right-color: #CCCCCC;\n"
                                        "                      border-bottom-color: #CCCCCC;\n"
                                        "                      border-width: 2px;\n"
                                        "                      border-style: outset;\n"
                                        "                      font : 14px;}\n"
                                        "\n"
                                        "")
        self.gridLayout_2.addWidget(self.pushButton, 1, 2, 1, 1)
        self.pushButton_2 = QtWidgets.QPushButton(self.widget)
        self.pushButton_2.clicked.connect(self.back)
        self.pushButton_2.setMinimumSize(QtCore.QSize(100, 40))
        self.pushButton_2.setStyleSheet("QPushButton\n"
                                        "                    {text-align : center;\n"
                                        "                     color:gray;\n"
                                        "                     font: bold;\n"
                                        "                     border-radius:10px;\n"
                                        "                     border-top-color: #888888;\n"
                                        "                     border-left-color: #888888;\n"
                                        "                     border-right-color: #CCCCCC;\n"
                                        "                     border-bottom-color: #CCCCCC;\n"
                                        "                     border-top-width:2px;\n"
                                        "                     border-left-width:3px;\n"
                                        "                     border-right-width:3px;\n"
                                        "                     border-bottom-width:4px;\n"
                                        "                     background-color:qlineargradient(x1:0, y1:0, x2:0, y2:1, stop: 0 #E5E5E5, stop: 1 #B7B7B7);\n"
                                        "                     background-color: rgb(255, 254, 249);\n"
                                        "                     border-style: outset;\n"
                                        "                     font : 14px;}\n"
                                        "                     QPushButton:pressed\n"
                                        "                     {text-align : center;\n"
                                        "                      background-color : light gray;\n"
                                        "                      font: bold;\n"
                                        "                      border-top-color: #888888;\n"
                                        "                      border-left-color: #888888;\n"
                                        "                      border-right-color: #CCCCCC;\n"
                                        "                      border-bottom-color: #CCCCCC;\n"
                                        "                      border-width: 2px;\n"
                                        "                      border-style: outset;\n"
                                        "                      font : 14px;}\n"
                                        "\n"
                                        "")
        self.gridLayout_2.addWidget(self.pushButton_2, 1, 1, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem1, 1, 3, 1, 1)
        self.verticalLayout_2.addWidget(self.widget)
        self.gridLayout_4.addLayout(self.verticalLayout_2, 0, 1, 1, 1)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)

        self.gridLayout_5 = QtWidgets.QGridLayout(self.frame1)
        self.gridLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout1 = QtWidgets.QVBoxLayout()
        self.label = QtWidgets.QLabel(self.frame1)
        self.label.setMinimumSize(QtCore.QSize(500, 300))
        self.label.setMaximumSize(QtCore.QSize(500, 300))
        self.label.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.label.setCursor(Qt.CrossCursor)
        self.label.setMouseTracking(True)
        self.verticalLayout1.addWidget(self.label)
        self.label1 = QtWidgets.QLabel(self.frame1)
        self.label1.setMinimumSize(QtCore.QSize(500, 300))
        self.label1.setMaximumSize(QtCore.QSize(500, 300))
        self.label1.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.label1.setCursor(Qt.CrossCursor)
        self.label1.setMouseTracking(True)
        self.verticalLayout1.addWidget(self.label1)
        self.gridLayout_5.addLayout(self.verticalLayout1, 0, 0, 1, 1)
        self.verticalLayout2 = QtWidgets.QVBoxLayout()
        self.label2 = QtWidgets.QLabel(self.frame)
        self.label2.setMinimumSize(QtCore.QSize(300, 500))
        self.label2.setMaximumSize(QtCore.QSize(300, 500))
        self.label2.setWordWrap(True)
        self.label2.setAlignment(QtCore.Qt.AlignTop)
        self.label2.setText(
            "<font style = 'font-size:30px; font-weight:bold'>" + '确认页' + "</font>""<br/>""<br/>""<font style='font-size:22px'>" + "显示所有计算出的点的位置，待用户确认。" + "</font>""<br/>""<br/>""<font style='font-size:22px'>" + "或者点击上一步。" + "</font>")
        self.verticalLayout2.addWidget(self.label2)
        self.widget1 = QtWidgets.QWidget(self)
        self.gridLayout2 = QtWidgets.QGridLayout(self.widget1)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout2.addItem(spacerItem2, 0, 0, 1, 1)

        self.pushButton1 = QtWidgets.QPushButton(self.widget1)
        self.pushButton1.clicked.connect(self.back1)
        self.pushButton1.setMinimumSize(QtCore.QSize(100, 40))
        self.pushButton1.setStyleSheet("QPushButton\n"
                                        "                    {text-align : center;\n"
                                        "                     color:gray;\n"
                                        "                     font: bold;\n"
                                        "                     border-radius:10px;\n"
                                        "                     border-top-color: #888888;\n"
                                        "                     border-left-color: #888888;\n"
                                        "                     border-right-color: #CCCCCC;\n"
                                        "                     border-bottom-color: #CCCCCC;\n"
                                        "                     border-top-width:2px;\n"
                                        "                     border-left-width:3px;\n"
                                        "                     border-right-width:3px;\n"
                                        "                     border-bottom-width:4px;\n"
                                        "                     background-color:qlineargradient(x1:0, y1:0, x2:0, y2:1, stop: 0 #E5E5E5, stop: 1 #B7B7B7);\n"
                                        "                     background-color: rgb(255, 254, 249);\n"
                                        "                     border-style: outset;\n"
                                        "                     font : 14px;}\n"
                                        "                     QPushButton:pressed\n"
                                        "                     {text-align : center;\n"
                                        "                      background-color : light gray;\n"
                                        "                      font: bold;\n"
                                        "                      border-top-color: #888888;\n"
                                        "                      border-left-color: #888888;\n"
                                        "                      border-right-color: #CCCCCC;\n"
                                        "                      border-bottom-color: #CCCCCC;\n"
                                        "                      border-width: 2px;\n"
                                        "                      border-style: outset;\n"
                                        "                      font : 14px;}\n"
                                        "\n"
                                        "")
        self.gridLayout2.addWidget(self.pushButton1, 0, 1, 1, 1)
        self.pushButton2 = QtWidgets.QPushButton(self.widget1)
        self.pushButton2.clicked.connect(self.check)
        self.pushButton2.setMinimumSize(QtCore.QSize(100, 40))
        self.pushButton2.setStyleSheet("QPushButton\n"
                                        "                    {text-align : center;\n"
                                        "                     color:gray;\n"
                                        "                     font: bold;\n"
                                        "                     border-radius:10px;\n"
                                        "                     border-top-color: #888888;\n"
                                        "                     border-left-color: #888888;\n"
                                        "                     border-right-color: #CCCCCC;\n"
                                        "                     border-bottom-color: #CCCCCC;\n"
                                        "                     border-top-width:2px;\n"
                                        "                     border-left-width:3px;\n"
                                        "                     border-right-width:3px;\n"
                                        "                     border-bottom-width:4px;\n"
                                        "                     background-color:qlineargradient(x1:0, y1:0, x2:0, y2:1, stop: 0 #E5E5E5, stop: 1 #B7B7B7);\n"
                                        "                     background-color: rgb(255, 254, 249);\n"
                                        "                     border-style: outset;\n"
                                        "                     font : 14px;}\n"
                                        "                     QPushButton:pressed\n"
                                        "                     {text-align : center;\n"
                                        "                      background-color : light gray;\n"
                                        "                      font: bold;\n"
                                        "                      border-top-color: #888888;\n"
                                        "                      border-left-color: #888888;\n"
                                        "                      border-right-color: #CCCCCC;\n"
                                        "                      border-bottom-color: #CCCCCC;\n"
                                        "                      border-width: 2px;\n"
                                        "                      border-style: outset;\n"
                                        "                      font : 14px;}\n"
                                        "\n"
                                        "")
        self.gridLayout2.addWidget(self.pushButton2, 0, 2, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout2.addItem(spacerItem3, 0, 3, 1, 1)
        self.verticalLayout2.addWidget(self.widget1)
        self.gridLayout_5.addLayout(self.verticalLayout2, 0, 1, 1, 1)
        self.gridLayout.addWidget(self.frame1, 0, 0, 1, 1)

        self.t10.start()
        self.t11.start()
        self.retranslateUi(self)
        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "更换产品"))
        self.pushButton.setText(_translate("Dialog", "下一步"))
        self.pushButton_2.setText(_translate("Dialog", "上一步"))
        self.pushButton1.setText(_translate("Dialog", "上一步"))
        self.pushButton2.setText(_translate("Dialog", "确认"))
        self.label20.setText(_translate("Dialog", "喷码最后4位："))
        self.label21.setText(_translate("Dialog", "每步进共几个喷码："))
        self.label22.setText(_translate("Dialog", "每步进前进几列："))
        self.pushButton12.setText(_translate("Dialog", "下一步"))


    def wait_re(self, step):
        self.label23.setStyleSheet('color:black')
        if step == 1:
            self.label23.setText('新图片处理中,请等待.')
        elif step == 2:
            self.label23.setText('新图片处理中,请等待..')
        else:
            self.label23.setText('新图片处理中,请等待...')

    def wait_re1(self, step):
        self.label11.setStyleSheet('color:back')
        if step == 1:
            self.label11.setText('请等待喷码位置计算.')
        elif step == 2:
            self.label11.setText('请等待喷码位置计算..')
        else:
            self.label11.setText('请等待喷码位置计算...')

    def write_json(self):
        one = self.lineEdit.text()
        two = self.lineEdit_2.text()
        three = self.lineEdit_3.text()
        if one == '':
            one = '24GF'
        if two == '':
            two = 18
        if three == '':
            three = 3
        try:
            ret = re.match(r'[a-zA-Z0-9]', one)
            if int(two) and int(three) and len(one) == 4 and ret:
                self.t10.setFlag(True)
                self.pushButton12.setEnabled(False)
                result =create_data(str(one), int(two), int(three))
                if result == True:
                    pass

            else:
                self.label23.setStyleSheet('color:red')
                self.label23.setText('输入有误！')
        except Exception as e:
            self.label23.setStyleSheet('color:red')
            self.label23.setText('请按提示格式输入！')

    def back(self):
        self.pushButton12.setEnabled(True)
        self.label23.setText('')
        self.frame.hide()
        self.frame0.show()

    def back1(self):
        self.t11.setFlag(False)
        self.label11.setText('')
        self.frame1.hide()
        self.frame.show()

    def next(self):
        if len(self.lb.lists) ==2 and len(self.lb2.lists) ==2:
            result = create_data1(self.lb.lists,self.lb2.lists)
            if result:
                self.t11.setFlag(True)
        else:
            self.label11.setStyleSheet('color:red')
            self.label11.setText('坐标未取完整！')

    def check(self):
        # filename = 'a:change_product.json'
        data={"step":4}
        # try:
        #     with open(filename, 'w') as file_obj:
        #         json.dump(data, file_obj)
        #     file_obj.close()
        #     self.close()
        # except:
        #     pass
        mmap_file.seek(0)
        mmap_file.write(json.dumps(data).encode())

    def closeEvent(self, event):
        self.frame1.hide()
        self.frame.hide()
        self.frame0.show()
        self.lb.lists=[]
        self.lb2.lists=[]
        self.t10.setFlag(False)
        self.t11.setFlag(False)
        self.label11.setText('')
        self.lineEdit.setText('')
        self.lineEdit_2.setText('')
        self.lineEdit_3.setText('')
        self.pushButton12.setEnabled(True)
        time.sleep(0.8)
        self.label23.setText('')
        # filename = 'a:change_product.json'
        data={"step":0}
        # try:
        #     with open(filename, 'w') as file_obj:
        #         json.dump(data, file_obj)
        #     file_obj.close()
        #     self.close()
        # except:
        #     pass
        mmap_file.seek(0)
        mmap_file.write(json.dumps(data).encode())
        self.close()


class Ui_Form(QWidget):
    sign = QtCore.pyqtSignal(list)
    t1 = Worker()
    timer = QTimer()

    def __init__(self):
        super().__init__()
        self.form2 = Ui_Dialog()
        self.setupUi()

    def setupUi(self):
        self.resize(1226, 766)
        self.setWindowIcon(QIcon("./icon/logo.ico"))
        self.timer.timeout.connect(self.get_data)
        self.t1.updated.connect(self.updata)
        self.sign.connect(self.close_dialog)
        window_pale = QPalette()
        window_pale.setBrush(self.backgroundRole(), QBrush(QPixmap("./icon/back4.png").scaled(1226, 892)))
        self.setPalette(window_pale)
        self.gridLayout = QtWidgets.QGridLayout(self)
        self.gridLayout.setContentsMargins(0, 0, 0, -1)

        self.widget_2 = QtWidgets.QWidget(self)
        self.widget_2.setMinimumSize(QtCore.QSize(0, 120))
        self.widget_2.setMaximumSize(QtCore.QSize(16777215, 120))
        # self.widget_2.setStyleSheet("background-color: rgb(181, 255, 146);")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.widget_2)
        self.label_3 = QtWidgets.QLabel(self.widget_2)
        self.label_3.setText("")
        self.label_3.setMinimumSize(QtCore.QSize(150, 0))
        self.label_3.setMaximumSize(QtCore.QSize(150, 16777215))
        # self.label_3.setStyleSheet("background-color: rgb(255, 129, 142);")
        self.label_3.setAlignment(Qt.AlignCenter)
        pixmap = QPixmap('./icon/logo.png').scaled(140, 80)
        self.label_3.setPixmap(pixmap)
        self.gridLayout_5.addWidget(self.label_3, 0, 0, 1, 1)
        self.widget_7 = QtWidgets.QWidget(self.widget_2)
        self.gridLayout_4 = QtWidgets.QGridLayout(self.widget_7)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setSpacing(0)
        self.label_10 = QtWidgets.QLabel(self.widget_7)
        self.label_10.setPixmap(QPixmap('./icon/all.png').scaled(60, 60))
        self.label_10.setAlignment(Qt.AlignCenter)
        self.label_10.setMinimumSize(QtCore.QSize(80, 60))
        self.label_10.setMaximumSize(QtCore.QSize(16777215, 150))
        self.label_10.setStyleSheet("background-color: rgb(208, 227, 255);\n"
                                    "border: 1px solid #EDEDED;\n"
                                    "border-top-left-radius:10px;\n"
                                    "border-bottom-left-radius:10px;\n"
                                    "padding:3px")
        self.label_10.setText("")
        self.horizontalLayout.addWidget(self.label_10)
        self.label_6 = QtWidgets.QLabel(self.widget_7)
        self.label_6.setMinimumSize(QtCore.QSize(160, 60))
        self.label_6.setMaximumSize(QtCore.QSize(16777215, 150))
        self.label_6.setStyleSheet("background-color: rgb(208, 227, 255);\n"
                                   "border: 1px solid #EDEDED;\n"
                                   "border-top-right-radius:10px;\n"
                                   "border-bottom-right-radius:10px;\n"
                                   "padding:3px")
        self.label_6.setText("")
        self.label_6.setAlignment(Qt.AlignCenter)
        self.horizontalLayout.addWidget(self.label_6)
        self.horizontalLayout_6.addLayout(self.horizontalLayout)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem1)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setSpacing(0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_11 = QtWidgets.QLabel(self.widget_7)
        self.label_11.setPixmap(QPixmap('./icon/good2.png').scaled(60, 60))
        self.label_11.setAlignment(Qt.AlignCenter)
        self.label_11.setMinimumSize(QtCore.QSize(80, 60))
        self.label_11.setMaximumSize(QtCore.QSize(16777215, 150))
        self.label_11.setStyleSheet("background-color: rgb(255, 249, 179);\n"
                                    "border: 1px solid #EDEDED;\n"
                                    "border-top-left-radius:10px;\n"
                                    "border-bottom-left-radius:10px;\n"
                                    "padding:3px")
        self.label_11.setText("")
        self.horizontalLayout_4.addWidget(self.label_11)
        self.label_7 = QtWidgets.QLabel(self.widget_7)
        self.label_7.setAlignment(Qt.AlignCenter)
        self.label_7.setMinimumSize(QtCore.QSize(160, 60))
        self.label_7.setMaximumSize(QtCore.QSize(16777215, 150))
        self.label_7.setStyleSheet("background-color: rgb(255, 249, 179);\n"
                                   "border: 1px solid #EDEDED;\n"
                                   "border-top-right-radius:10px;\n"
                                   "border-bottom-right-radius:10px;\n"
                                   "padding:3px")
        self.label_7.setText("")
        self.horizontalLayout_4.addWidget(self.label_7)
        self.horizontalLayout_6.addLayout(self.horizontalLayout_4)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem2)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setSpacing(0)
        self.label_12 = QtWidgets.QLabel(self.widget_7)
        self.label_12.setPixmap(QPixmap('./icon/bad2.png').scaled(55, 55))
        self.label_12.setAlignment(Qt.AlignCenter)
        self.label_12.setMinimumSize(QtCore.QSize(80, 60))
        self.label_12.setMaximumSize(QtCore.QSize(16777215, 150))
        self.label_12.setStyleSheet("background-color: rgb(170, 170, 255);\n"
                                    "border: 1px solid #EDEDED;\n"
                                    "border-top-left-radius:10px;\n"
                                    "border-bottom-left-radius:10px;\n"
                                    "padding:3px")
        self.label_12.setText("")
        self.horizontalLayout_5.addWidget(self.label_12)
        self.label_8 = QtWidgets.QLabel(self.widget_7)
        self.label_8.setAlignment(Qt.AlignCenter)
        self.label_8.setMinimumSize(QtCore.QSize(160, 60))
        self.label_8.setMaximumSize(QtCore.QSize(16777215, 150))
        self.label_8.setStyleSheet("background-color: rgb(170, 170, 255);\n"
                                   "border: 1px solid #EDEDED;\n"
                                   "border-top-right-radius:10px;\n"
                                   "border-bottom-right-radius:10px;\n"
                                   "padding:3px")
        self.label_8.setText("")
        self.horizontalLayout_5.addWidget(self.label_8)
        self.horizontalLayout_6.addLayout(self.horizontalLayout_5)
        self.gridLayout_4.addLayout(self.horizontalLayout_6, 0, 0, 1, 1)
        self.gridLayout_5.addWidget(self.widget_7, 0, 1, 1, 1)
        self.gridLayout.addWidget(self.widget_2, 1, 0, 1, 2)
        self.widget_3 = QtWidgets.QWidget(self)
        # self.widget_3.setStyleSheet("background-color: rgb(255, 255, 127);")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.widget_3)
        self.label_4 = QtWidgets.QLabel(self.widget_3)
        self.label_4.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.label_4.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.label_4.setText("")
        self.gridLayout_2.addWidget(self.label_4, 1, 0, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.widget_3)
        self.label_5.setText("")
        self.label_5.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.gridLayout_2.addWidget(self.label_5, 0, 0, 1, 1)
        self.gridLayout.addWidget(self.widget_3, 2, 0, 2, 1)
        self.widget_4 = QtWidgets.QWidget(self)
        self.widget_4.setMinimumSize(QtCore.QSize(0, 350))
        self.widget_4.setMaximumSize(QtCore.QSize(530, 350))
        # self.widget_4.setStyleSheet("background-color: rgb(255, 211, 189);")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.widget_4)
        self.label_2 = QtWidgets.QLabel(self.widget_4)
        self.label_2.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_2.setStyleSheet("color:white")
        self.label_2.setWordWrap(False)
        self.label_2.setAlignment(Qt.AlignCenter)
        self.label_2.setText("")
        self.gridLayout_3.addWidget(self.label_2, 0, 0, 1, 1)
        self.qScrollArea = QScrollArea(self)
        self.qScrollArea.setStyleSheet("border: 0px solid black")
        self.qScrollArea.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        # self.qScrollArea.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.qScrollArea.setMaximumSize(16777215,160)
        self.qScrollArea.setWidgetResizable(True)
        self.qWidget = QWidget()
        self.qScrollArea.setWidget(self.qWidget)
        self.qVBoxLayout = QVBoxLayout()
        self.qVBoxLayout.setContentsMargins(0,0,0,0)
        self.qWidget.setLayout(self.qVBoxLayout)
        self.label = QtWidgets.QLabel(self.widget_4)
        self.label.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.label.setText("")
        self.label.setAlignment(Qt.AlignCenter)
        self.qVBoxLayout.addWidget(self.label)
        self.label.setAlignment(Qt.AlignCenter)
        self.gridLayout_3.addWidget(self.qScrollArea, 1, 0, 1, 1)
        self.qScrollArea1 = QScrollArea(self)
        self.qScrollArea1.setStyleSheet("border: 0px solid black")
        self.qScrollArea1.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        # self.qScrollArea1.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.qScrollArea1.setMaximumSize(16777215,160)
        self.qScrollArea1.setWidgetResizable(True)
        self.qWidget1 = QWidget()
        self.qScrollArea1.setWidget(self.qWidget1)
        self.qVBoxLayout1 = QVBoxLayout()
        self.qVBoxLayout1.setContentsMargins(0, 0, 0, 0)
        self.qWidget1.setLayout(self.qVBoxLayout1)
        self.label_9 = QtWidgets.QLabel(self.widget_4)
        self.label_9.setStyleSheet("background-color: rgb(0, 0, 0);")
        self.label_9.setText("")
        self.label_9.setAlignment(Qt.AlignCenter)
        self.qVBoxLayout1.addWidget(self.label_9)
        self.label_9.setAlignment(Qt.AlignCenter)
        self.gridLayout_3.addWidget(self.qScrollArea1, 2, 0, 1, 1)

        self.gridLayout.addWidget(self.widget_4, 2, 1, 1, 1)
        self.widget_5 = QtWidgets.QWidget(self)
        self.widget_5.setMaximumSize(QtCore.QSize(530, 16777215))
        # self.widget_5.setStyleSheet("background-color: rgb(212, 83, 255);")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.widget_5)
        self.textBrowser = QtWidgets.QTextBrowser(self.widget_5)
        self.textBrowser.setStyleSheet("border-radius:10px;\n"
                                       "border: 1px solid rgb(200, 200, 200);\n"
                                       "background-color: rgb(249, 251, 255);")
        self.gridLayout_6.addWidget(self.textBrowser, 0, 0, 1, 1)
        self.gridLayout.addWidget(self.widget_5, 3, 1, 1, 1)
        self.widget = QtWidgets.QWidget(self)
        self.widget.setMinimumSize(QtCore.QSize(100, 0))
        self.widget.setMaximumSize(QtCore.QSize(100, 1677772))
        self.widget.setStyleSheet("border-left:2px solid #3f3f3f;")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.widget)
        spacerItem2 = QtWidgets.QSpacerItem(20, 547, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_7.addItem(spacerItem2, 0, 0, 1, 1)
        self.pushButton_3 = QtWidgets.QPushButton(self.widget)
        self.pushButton_3.setIconSize(QSize(80, 80))
        self.pushButton_3.setIcon(QIcon("./icon/ic.png"))
        self.pushButton_3.clicked.connect(self.change)
        self.pushButton_3.setMinimumSize(QtCore.QSize(45, 45))
        self.pushButton_3.setStyleSheet("color: rgb(137, 221, 255);\n"
                                        # "background-color: rgb(37, 121, 255);\n"
                                        "border-style:none;\n"
                                        # "border:1px solid #3f3f3f; \n"
                                        "min-height:45px;\n"
                                        "border-radius:15px;\n"
                                        "")
        self.gridLayout_7.addWidget(self.pushButton_3, 1, 0, 1, 1)
        self.pushButton_2 = QtWidgets.QPushButton(self.widget)
        self.pushButton_2.setIconSize(QSize(85, 85))
        self.pushButton_2.setIcon(QIcon("./icon/close.png"))
        self.pushButton_2.clicked.connect(self.close)
        self.pushButton_2.setMinimumSize(QtCore.QSize(45, 45))
        self.pushButton_2.setStyleSheet("color: rgb(137, 221, 255);\n"
                                        # "background-color: rgb(37, 121, 255);\n"
                                        "border-style:none;\n"
                                        # "border:1px solid #3f3f3f; \n"
                                        "min-height:45px;\n"
                                        "border-radius:15px;\n"
                                        "")
        self.gridLayout_7.addWidget(self.pushButton_2, 2, 0, 1, 1)
        self.gridLayout.addWidget(self.widget, 1, 2, 3, 1)

        self.retranslateUi(self)
        QtCore.QMetaObject.connectSlotsByName(self)
        self.t1.start()
        self.timer.start(2000)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "双汇喷码检测"))
        self.label_2.setText(_translate("Form", "字码细节区域"))

    def updata(self, e):
        global datas
        self.textBrowser.setText(e)
        datas.pop(0)

    def close(self):
        infoBox = QMessageBox()
        infoBox.setWindowIcon(QIcon("./icon/logo.ico"))
        infoBox.setStyleSheet(
            "QLabel{min-width:180 px;min-height:160px; font-size: 30px;} QPushButton{ width:240px;height:80px; font-size: 25px; }");
        infoBox.setIcon(QMessageBox.Information)
        infoBox.setText("是否关机！")
        infoBox.setWindowTitle("提示")
        infoBox.setStandardButtons(QMessageBox.No | QMessageBox.Ok)
        buttonY = infoBox.button(QMessageBox.Ok)
        buttonY.setText('是')
        buttonN = infoBox.button(QMessageBox.No)
        buttonN.setText('否')
        infoBox.button(QMessageBox.No).animateClick(3 * 1000)
        re = infoBox.exec_()
        if re == buttonY:
            run_cmd = "shutdown -s -t 2"
            os.system(run_cmd)
        else:
            pass

    def change(self):
        form.form2.label23.setText('')
        self.form2.exec()

    def close_dialog(self,e):
        if e[0] ==1:
            self.form2.frame0.hide()
            self.form2.t10.setFlag(False)
            self.form2.label11.setText('')
            self.form2.lb.pix =QPixmap(e[1]).scaled(500, 300, Qt.IgnoreAspectRatio, Qt.SmoothTransformation)
            self.form2.lb2.pix =QPixmap(e[2]).scaled(500, 300, Qt.IgnoreAspectRatio, Qt.SmoothTransformation)
            self.form2.lb.image =cv2.imread(e[1])
            self.form2.lb2.image =cv2.imread(e[2])
            self.form2.frame.show()
        else:
            self.form2.frame.hide()
            self.form2.t11.setFlag(False)
            self.form2.label11.setText('')
            jpg = QPixmap(e[1]).scaled(500, 300, Qt.IgnoreAspectRatio, Qt.SmoothTransformation)
            jpg1 = QPixmap(e[2]).scaled(500, 300, Qt.IgnoreAspectRatio, Qt.SmoothTransformation)
            self.form2.label.setPixmap(jpg)
            self.form2.label1.setPixmap(jpg1)
            self.form2.frame1.show()

    def get_data(self):
        all, good, bad = get_datas()
        if all != 0:
            g = '%.2f' % (good * 100 / all)
            b = '%.2f' % (bad * 100 / all)
        else:
            g = '0.00'
            b = '0.00'
        self.label_6.setText("<font style = 'font-size:30px; font-weight:bold'>" + str(all) + "</font>"
                                                                                              "<br/>""<br/>"
                                                                                              "<font style = 'font-size:18px;'> 今日检测总数 </font>")
        self.label_7.setText("<font style = 'font-size:30px; font-weight:bold'>" + str(good) + "</font>"
                                                                                               "<br/>""<br/>"
                                                                                               "<font style = 'font-size:18px;'> 今日良品率" + str(
            g) + "%" + "</font>")
        self.label_8.setText("<font style = 'font-size:30px; font-weight:bold'>" + str(bad) + "</font>"
                                                                                              "<br/>""<br/>"
                                                                                              "<font style = 'font-size:18px;'> 今日不良品率" + str(
            b) + "%" + "</font>")


@app.post('/imgs/')
async def get_imgs(item: Item1):
    height = form.label_4.height()
    width = form.label_4.width()
    jpg = QPixmap(item.value).scaled(width, height, Qt.KeepAspectRatio, Qt.SmoothTransformation)
    height1 =form.label.height()
    jpg1 = QPixmap(item.value)
    h =jpg1.height()
    w =jpg1.width()
    bl =h/height1
    width1 =int(w/bl)
    jpg1 =jpg1.scaled(width1,height1,Qt.KeepAspectRatio,Qt.SmoothTransformation)
    if item.key == 1:
        form.label_5.setPixmap(jpg)
    elif item.key == 2:
        form.label_4.setPixmap(jpg)
    elif item.key == 3:
        form.label.setPixmap(jpg1)
    else:
        form.label_9.setPixmap(jpg1)
    return {"status": 200}


@app.post('/result/')
async def get_result(item: Item2):
    global datas
    datas.append('''<div style="font:27px;width:400px;">{}</div>'''.format(
        str(item.line1) + '<br />' + str(item.line2) + '<br />' + str(item.line3) + '<br />' + str(
            item.line4) + '<br />' + '<br />'))
    session = MySession()
    t = time.strftime("%Y-%m-%d", time.localtime())
    res = session.query(Dailydata).first()
    if res.created_time == t:
        session.query(Dailydata).filter(Dailydata.id == 1).update(
            {Dailydata.goodNum: Dailydata.goodNum + item.good, Dailydata.badNum: Dailydata.badNum + item.bad},
            synchronize_session=False)

    else:
        session.query(Dailydata).update({Dailydata.badNum: 0, Dailydata.goodNum: 0, Dailydata.created_time: t},
                                        synchronize_session=False)
    session.commit()
    session.close()
    return {"status": 200}


@app.get('/del_mes/')
@app.post('/del_mes/')
async def del_mes():
    session = MySession()
    session.query(Dailydata).update({Dailydata.badNum: 0}, synchronize_session=False)
    session.commit()
    session.close()
    return {"status": 200}


@app.get('/change_product_1')
async def change_product_1(fn1: str, fn2: str):
    form.sign.emit([1,fn1,fn2])
    return {"status": 200}


@app.get('/change_product_2')
async def change_product_2(fn1: str, fn2: str):
    form.sign.emit([2,fn1,fn2])
    return {"status": 200}


def start_server():
    import uvicorn
    uvicorn.run(app=app,
                host="127.0.0.1",
                port=8088,
                workers=1)


server_thread = threading.Thread(target=start_server)
server_thread.setDaemon(True)
server_thread.start()
mmap_file = mmap.mmap(-1, 1024,tagname='change_product')

if __name__ == "__main__":
    app = QApplication(sys.argv)
    form = Ui_Form()
    form.show()
    form.showMaximized()
    sys.exit(app.exec_())